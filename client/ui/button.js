/*Copyright (C) 2013 Dourthe Aymeric    This program is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program.  If not, see [http://www.gnu.org/licenses/].	Class: SimpleButton	extends ColorDrawable implements ClickHandler, MouseOverHandler */var SimpleButton = ColorDrawable.extend({		/*		Constructor: SimpleButton		Parameters:		x - x position		y - y position		width - width		height - height		backgroundColor - background color		textColor - text color		curentText - curentText to draw		callback - callback to call when button is clicked	*/	constructor : function(x, y, width, height, backgroundColor, textColor, curentText, callback){		this.base(x,y,width,height,backgroundColor);		this.instanceName = "SimpleButton";		this.defaultSize = 12;		this.textColor = textColor;		this.clickCallback = callback;		this.curentText = curentText;		if (this.width >= this.height){			this.setCorners(height * 0.2, height * 0.2, height * 0.2, height * 0.2);		}else{			this.setCorners(width * 0.2, width * 0.2, width * 0.2, width * 0.2);		}		this.enterEnabled = false;	},		/*		Function: enableReturn		Enable validation with return key	*/	enableReturn : function(){		this.enterEnabled = true;	},		/* 		Function: disableReturn		Disable validation with return key	*/ 	disableReturn : function(){		this.enterEnabled = true;	},		/*		Function: mouseDown		Override if needed	*/	mouseDown : function(){},		/*		Function: mouseUp		Default mouseUp behavior	*/	mouseUp : function(){		if (!this.enabled || !this.isVisible()) return;		this.clickCallback.apply(this);	},	/*		Function: draw		Parameters:		ec - context where to draw				extend if needed	*/	draw : function(ec){		if (!this.visible) return;		if (this.enterEnabled){			if (Input.keysDown[KEY_RETURN]) this.mouseDown();		}		this.base(ec);		noStroke();		textSize(this.defaultSize);		fill(this.textColor);		text(this.curentText, this.x + (this.width - textWidth(this.curentText)) * 0.5, this.y + (this.height + this.defaultSize) * 0.5);		if (this.c){			stroke(this.c.r * 0.2, this.c.g * 0.2,this.c.b * 0.2,1);		}	},		/*		Function: setTextSize		Parameters:		s - size (number)				Change text size	*/	setTextSize : function(s){		this.defaultSize = s;	},		/*		Function: mouseEnter		Default mouseEnter behavior	*/	mouseEnter : function(){			if (!this.enabled || !this.isVisible()) return;		Input.setCursor('pointer');	},		/*		Function: mouseLeave		Default mouseLeave behavior	*/	mouseLeave : function(){		if (!this.enabled || !this.isVisible()) return;		Input.setCursor('default');	},		/*		Function: mouseOver		Override if needed	*/	mouseOver : function(){	}});/*	Class: ImageButton	extends Drawable implements ClickHandler, MouseOverHandler*/var ImageButton = Drawable.extend({ 	/*		Constructor: ImageButton		Parameters:		x - x position		y - y position		path - path to the image		callback - callback to call when button is clicked		tooltip - text to display when mouse is over	*/	constructor : function(x, y, path, callback, tooltip){		this.base(x,y,path);		this.instanceName = "ImageButton";		this.tooltipEnabled  = false;		this.clickCallback = callback;		this.tooltip = null;		if (tooltip != undefined){			this.tooltip = tooltip;		}		this.enterEnabled = false;	},	/*		Function: enableReturn		Enable validation with return key	*/	enableReturn : function(){		this.enterEnabled = true;	},		/*		Function: disableReturn		Enable validation with return key	*/	disableReturn : function(){		this.enterEnabled = true;	},		/*		Function: mouseUp		Default mouseUp behavior	*/	mouseUp : function(){		if (!this.enabled || !this.isVisible()) return;		this.clickCallback.apply(this);			},		/*		Function: mouseDown		Override if needed	*/	mouseDown : function(){	},	/*		Function: afterProcess		extend if needed	*/	afterProcess : function(){		if (this.enterEnabled){			if (Input.keysDown[KEY_RETURN]) this.mouseDown();		}		if (this.tooltipEnabled){			stroke(255,255,255);			fill(0,0,0);			var w = textWidth(this.tooltip);			var win = window;			if (win.mouseX + w > Engine.width){				lineWidth(1);				rect(win.mouseX - w ,win.mouseY - 30,w + 20,20, 5);								noStroke();				fill(255,255,255);				text(this.tooltip, win.mouseX - w + 10, win.mouseY - 15);			}else{				lineWidth(1);				rect(win.mouseX - w * 0.5 - 10, win.mouseY - 30,w + 20,20, 5);				noStroke();				fill(255,255,255);				text(this.tooltip, win.mouseX - w * 0.5, win.mouseY - 15);			}		}	},		/*		Function: mouseEnter		Default mouseEnter behavior	*/	mouseEnter : function(){		if (!this.enabled || !this.isVisible()) return;		Input.setCursor('pointer');		if (this.tooltip != null){			this.tooltipEnabled = true;		}	},		/*		Function: mouseLeave		Default mouseLeave behavior	*/	mouseLeave : function(){		if (!this.enabled || !this.isVisible()) return;		this.tooltipEnabled = false;		Input.setCursor('default');	},		/*		Function: mouseOver		Override if needed	*/	mouseOver : function(){	}});/*	Class: ImageTextButton	extends Drawable implements ClickHandler, MouseOverHandler*/var ImageTextButton = Drawable.extend({ 		/*		Constructor: ImageTextButton		Parameters:		x - x position		y - y position		path - path to the image		textColor - text color		curentText - curentText to draw		callback - callback to call when button is clicked	*/	constructor : function(x, y, path, textColor, curentText, callback){		this.base(x,y,path);		this.instanceName = "ImageButton";		this.tooltipEnabled  = false;		this.path = path;		this.clickCallback = callback;		this.textColor = textColor;		this.curentText = curentText;		this.defaultSize = 12;		this.enterEnabled = false;	},	/* 		Function: enableReturn		Enable validation with return key	*/	enableReturn : function(){		this.enterEnabled = true;	},		/* 		Function: enableReturn		Disable validation with return key	*/ 	disableReturn : function(){		this.enterEnabled = true;	},		/*		Function: setRollover		Parameters:		img - drawable				Roll over image	*/	setRollover : function(img){		this.pathRollover = img;	},		/*		Function: mouseUp		Default mouseUp behavior	*/	mouseUp : function(){		if (!this.enabled || !this.isVisible()) return;		this.clickCallback.apply(this);			},		/*		Function: mouseDown		Override if needed	*/	mouseDown : function(){	},		/*		Function: draw		Parameters:		ec - context where to draw	*/	draw : function(ec){		if (this.enterEnabled){			if (Input.keysDown[KEY_RETURN]) this.mouseDown();		}		this.base(ec);		if(this.visible){			noStroke();			textSize(this.defaultSize);			fill(this.textColor.r,this.textColor.g,this.textColor.b);			text(this.curentText, this.x + (this.width - textWidth(this.curentText)) * 0.5, this.y + (this.height + this.defaultSize) * 0.5);		}	},		/*		Function: mouseEnter		Default mouseEnter behavior	*/	mouseEnter : function(){		if (!this.enabled || !this.isVisible()) return;		Input.setCursor('pointer');		if(this.pathRollover){			Drawable.changeImage(this, this.pathRollover);				}	},		/*		Function: mouseLeave		Default mouseLeave behavior	*/	mouseLeave : function(){		if (!this.enabled || !this.isVisible()) return;		Input.setCursor('default');		if(this.pathRollover){			Drawable.changeImage(this, this.path);				}	},		/*		Function: mouseOver		Override if needed	*/	mouseOver : function(){	}});/*	Class: ImageButton	extends Drawable implements ClickHandler, MouseOverHandler*/var ImageButton = Drawable.extend({ 	/*		Constructor: ImageButton		Parameters:		x - x position		y - y position		path - path to an image		callback - callback on click		tooltip - tooltip displayed on mouse over	*/	constructor : function(x, y, path, callback, tooltip){		this.base(x,y,path);		this.instanceName = "ImageButton";		this.tooltipEnabled  = false;		this.clickCallback = callback;		this.tooltip = null;		if (tooltip != undefined){			this.tooltip = tooltip;		}		this.enterEnabled = false;	},	/*		Function: enableReturn		Enable validation with return key	*/	enableReturn : function(){		this.enterEnabled = true;	},		/* 		Function: disableReturn		Disable validation with return key	*/ 	disableReturn : function(){		this.enterEnabled = true;	},		/*		Function: mouseUp		Default mouseUp behavior	*/	mouseUp : function(){		if (!this.enabled || !this.isVisible()) return;		this.clickCallback.apply(this);			},		/*		Function: mouseDown		Default mouseDown behavior	*/	mouseDown : function(){			},	/*		Function: afterProcess		extend if needed	*/	afterProcess : function(){		if (this.enterEnabled){			if (Input.keysDown[KEY_RETURN]) this.mouseDown();		}		if (this.tooltipEnabled){			stroke(255,255,255);			fill(0,0,0);			var w = textWidth(this.tooltip);			var win = window;			if (win.mouseX + w > Engine.width){				lineWidth(1);				rect(win.mouseX - w ,win.mouseY - 30,w + 20,20, 5);								noStroke();				fill(255,255,255);				text(this.tooltip, win.mouseX - w + 10, win.mouseY - 15);			}else{				lineWidth(1);				rect(win.mouseX - w * 0.5 - 10, win.mouseY - 30,w + 20,20, 5);				noStroke();				fill(255,255,255);				text(this.tooltip, win.mouseX - w * 0.5, win.mouseY - 15);			}		}	},		/*		Function: mouseEnter		Default mouseEnter behavior	*/	mouseEnter : function(){		if (!this.enabled || !this.isVisible()) return;		Input.setCursor('pointer');		if (this.tooltip != null){			this.tooltipEnabled = true;		}	},		/*		Function: mouseLeave		Default mouseLeave behavior	*/	mouseLeave : function(){		if (!this.enabled || !this.isVisible()) return;		this.tooltipEnabled = false;		Input.setCursor('default');	},		/*		Function: mouseOver		Default mouseOver behavior	*/	mouseOver : function(){	}});