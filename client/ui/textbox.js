/*Copyright (C) 2013 Dourthe Aymeric    This program is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program.  If not, see [http://www.gnu.org/licenses/].	Class: TextBox	extends ColorDrawable implements FocusHandler, MouseOverHandler, KeyPressHandler*/var TextBox = ColorDrawable.extend( {		/*		Constructor: TextBox		Parameters:		x - x position		y - y position		width - width		height - height		backgroundColor - background color		textColor - text color	*/	constructor : function(x, y, width, height, backgroundColor, textColor){		this.base(x,y,width,height,backgroundColor);		this.instanceName = "TextBox";		this.textColor = textColor;		this.curentText = "";		this.fontSize = 12;		this.focus = false;		this.showCursor = true;		this.cursorPos = 0;		this.cursorTime = new Timer(500);	},	/*		Function: mouseEnter		Default mouseEnter behavior	*/	mouseEnter : function(){		if (!this.enabled || !this.isVisible()) return;		Input.setCursor('text');		if (this.tooltip != null){			this.tooltipEnabled = true;		}	},		/*		Function: mouseUp		Override if needed	*/	mouseUp : function(){	},		/*		Function: mouseDown		Override if needed	*/	mouseDown : function(){	},		/*			*/	setFocus : function(f){		this.focus = f;	},		/*		*/	onFocus : function(){		if (!this.enabled || !this.isVisible()) return;		this.focus = true;		//if(Engine.phone){			document.getElementById('keyboard_textbox').focus();		//}				if (Engine.phone){			//Input.showKeyboard(this);		}	},		/*		*/	onBlur : function(){		this.focus = false;	},		/*		Function: mouseLeave		Default mouseLeave behavior	*/	mouseLeave : function(){		if (this.enabled || this.isVisible()){ 			this.tooltipEnabled = false;			Input.setCursor('default');		}	},		/*		Function: mouseOver		Override if needed	*/	mouseOver : function(){},	/*		Function: keyDown		Extend if needed	*/	keyDowns : function(keyCode){	var SHIFT = 16;	var CAPSLK = 20;		if (this.focus && textWidth(this.curentText) < this.width - 10){			for (var i = 0; i < Input.keysDown.length; i++){				if (i == KEY_BKSPACE && Input.keysDown[i]){					this.curentText = this.curentText.substring(0, this.curentText.length - 1);					this.cursorPos--;					if (this.cursorPos < 0) this.cursorPos = 0;				}else if (Input.keysDown[i]){					if (Input.keysDown[SHIFT] || Input.keysDown[CAPSLK]){						this.curentText += String.fromCharCode(i).toUpperCase();						this.cursorPos++;						return;					}else{						this.curentText += String.fromCharCode(i).toLowerCase();						this.cursorPos++;						return;					}					this.cursorPos++;				}			}		}	},		keyDown : function(keyCode){	var SHIFT = 16;	var CAPSLK = 20;	var CRL = 17;		if (this.focus && textWidth(this.curentText) < this.width - 10){			if (Input.keysDown[KEY_BKSPACE]){				this.curentText = this.curentText.substring(0, this.curentText.length - 1);				this.cursorPos--;				if (this.cursorPos < 0) this.cursorPos = 0;			}else if (Input.keysDown[keyCode]){				if (Input.keysDown[SHIFT] || Input.keysDown[CAPSLK]){					this.curentText += String.fromCharCode(keyCode).toUpperCase();					this.cursorPos++;					return;				}else{					this.curentText += String.fromCharCode(keyCode).toLowerCase();					this.cursorPos++;					return;				}				this.cursorPos++;			}		}	},		/*		Function: keyUp		Override if needed	*/	keyUp : function(){},		/*		Function: draw		Parameters:		ec - context where to draw	*/	draw : function(ec){		this.base();		fill(this.textColor.r,this.textColor.g,this.textColor.b);		textSize(this.fontSize);		if (this.focus){			if (this.showCursor){				text([this.curentText.substring(0,this.cursorPos) , "|" , this.curentText.substring(this.cursorPos,this.curentText.length)].join(''),this.x + 2,this.y + this.height - this.fontSize * 0.5);			}else{				text([this.curentText.substring(0,this.cursorPos), " ", this.curentText.substring(this.cursorPos,this.curentText.length)].join(''),this.x + 2,this.y +  this.height - this.fontSize * 0.5);			}		}else{			text(this.curentText,this.x + 2,this.y + this.height - this.fontSize * 0.5);		}		if(this.cursorTime){			if(this.cursorTime.itsTime())				this.showCursor = ++this.showCursor % 2;		}	},		/*		Function: afterProcess		Extend if needed	*/	afterProcess : function(){		if (this.tooltipEnabled){			stroke(255,255,255);			fill(0,0,0);			var w = textWidth(this.tooltip);			if (mouseX + w > Engine.width){				rect(mouseX - w ,mouseY - 30,w + 20,20, 5);								noStroke();				fill(255,255,255);				text(this.tooltip, mouseX - w + 10, mouseY - 15);			}else{				rect(mouseX - w * 0.5 - 10,mouseY - 30,w + 20,20, 5);				noStroke();				fill(255,255,255);				text(this.tooltip, mouseX - w * 0.5, mouseY - 15);			}		}	},		/*		Function: getText		Return current text	*/	getText : function(){		return this.curentText;	}});/*	Class: PasswordBox	extends TextBox implements FocusHandler, MouseOverHandler, KeyPressHandler*/var PasswordBox = TextBox.extend({		/*		Constructor: PasswordBox		Parameters:		x - x position		y - y position		width - width		height - height		backgroundColor - background color		textColor - text color		passwordChar - char to replace letter	*/	constructor : function (x, y, width, height, backgroundColor, textColor, passwordChar){		this.base(x,y,width,height,backgroundColor,textColor);		this.instanceName = "PasswordBox";		this.passwordChar = passwordChar;		this.trueText = "";	},	/*		Function: keyDown		Extend if needed	*/	keyDown : function(){		if (this.focus && textWidth(this.curentText) < this.width - 10){			for (var i = 0; i < Input.keysDown.length; i++){				if (i == KEY_BKSPACE && Input.keysDown[i]){					this.trueText = this.trueText.substring(0, this.curentText.length - 1);					this.curentText = this.curentText.substring(0, this.curentText.length - 1);					this.cursorPos--;					if (this.cursorPos < 0) this.cursorPos = 0;				}else if (Input.keysDown[i]){					if (Input.keysDown[KEY_SHIFT] || Input.keysDown[KEY_CAPSLK]){						//this.trueText += String.fromCharCode(i).toUpperCase();					}else{						this.trueText += String.fromCharCode(i).toLowerCase();					}					this.curentText += this.passwordChar;					this.cursorPos++;				}			}		}	},		/*		Function: getText		Return current typped text	*/	getText : function(){		return this.trueText;	}});